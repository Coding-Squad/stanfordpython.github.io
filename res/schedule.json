[
	{
		"num": 1,
		"title": "Welcome to Python!",
		"visible": true,
		"days": [
			{
				"title": "Welcome to Python",
				"date": "2016-03-28",
				"description": "Hello world! Welcome to CS41. Topics covered: why take CS41, history and context of Python, zen and philosophy of Python, who uses Python, and lots of Python basics (using the interpreter, comments, variables, types, numbers, math, booleans, logic, strings, lists, slicing, console I/O, control flow, loops, range, functions)"
			},
			{
				"title": "Python Fundamentals",
				"date": "2016-03-30",
				"description": "Our rapid progression through Python fundamentals continues, covering: objects, variables, and types, duck typing, equality vs. identity testing, additional useful string methods, string formatting (using .format(), file I/O (using a context manager), running Python as a script, and the basics of imports. The remainder of class was used to set up (and troubleshoot) Python installations, as well as start work on Lab 1."
			}
		],
		"dates": {
			"start": "2016-03-26",
			"end": "2016-04-02"
		}
	},
	{
		"num": 2,
		"title": "Data Structures",
		"visible": true,
		"days": [
			{
				"title": "Intro to Data Structures",
				"date": "2016-04-04",
				"description": "Python's numerous tools for data manipulation makes life easy for programmers. Together with a review of lists from last week, we'll see dictionaries, tuples, and sets, along with all of their common operators and even a few uncommon ones. We briefly look at a few looping techniques (enumerate, zip), and then dive into comprehensions. Python allows us to write list, dictionary, and set comprehensions, and we'll explore these tools as well as their connection to higher-level reasoning about problem-solving."
			},
			{
				"title": "Data Structures Lab",
				"date": "2016-04-06",
				"description": "The first full-length lab of CS41 features a wide collection of small problems, chosen to practice the many, many topics covered in the first three days of lecture and solidify concepts that may not have been absorbed on the first pass."
			}
		],
		"dates": {
			"start": "2016-04-03",
			"end": "2016-04-09"
		}
	},
	{
		"num": 3,
		"title": "Functions",
		"visible": true,
		"days": [
			{
				"title": "Functions",
				"date": "2016-04-11",
				"description": "We've seen functions in other languages, but Python gives us additional tools in defining and calling functions. After reviewing some nuances in the function execution model regarding return values, scope, and pass-by semantics, we'll see keyword arguments alongside their familiar positional counterparts. We'll discuss variadic positional arguments and variadic keyword arguments, and their relation to str.format. Lastly, we peek into an odd quirk of Python - that functions are indeed objects, and can be treated as such."
			},
			{
				"title": "Functions Lab",
				"date": "2016-04-13",
				"description": "This lab first drills function argument rules, then asks you to write functions utilizing the new superpowers offered by Python functions. Several function nuances are covered, including the danger of mutable default values. The lab closes with a thorough investigation of function objects and their attributes, at least in CPython."
			}
		],
		"dates": {
			"start": "2016-04-10",
			"end": "2016-04-16"
		}
	},
	{
		"num": 4,
		"title": "Functional Programming",
		"visible": true,
		"days": [
			{
				"title": "Functional Programming",
				"date": "2016-04-18",
				"description": "This is, by far, my favorite lecture to give. We first discuss functional programming's place in the landscape of programming paradigms - what makes this different from Java and C++ - and then introduce the concept of higher-order functions through map and filter, and anonymous lambda functions. We'll understand iterators, generator expressions, and generators as core ideas in functional programming, and briefly talk about where these tools could show up in Python. Lastly, we'll go over decorators - an amazing application of functional programming ideas to solve common programming problems."
			},
			{
				"title": "Functional Programming Lab",
				"date": "2016-04-20",
				"description": "Practice with map, filter, and lambda, and then explore functools.reduce and the operator module for more depth. As a thought experiment, we briefly discuss how to convert iterative Python code to functional code, and then practice with iterators and generators, using the itertools module to build power operators from linear algebra in under ten lines of Python. Closure semantics are also reviewed as a preview for the main event - writing decorators!"
			}
		],
		"dates": {
			"start": "2016-04-17",
			"end": "2016-04-23"
		}
	},
	{
		"num": 5,
		"title": "Object-Oriented Python",
		"visible": true,
		"days": [
			{
				"title": "Object-Oriented Python",
				"date": "2016-04-25",
				"description": "After last week's foray into FP, we're back in the comfortable land of OOP, covering: differences between class objects and instance objects, how attribute resolution works, methods vs. functions, single and multiple inheritance, as well as 'magic' dunderbar methods in Python for operator overloading, with an emphasis on masquerading as builtin types. In the latter half of class, we'll explore the hierarchy of Exceptions, and then cover proper exceptional control flow using try/except/else/finally."
			},
			{
				"title": "OOP Lab",
				"date": "2016-04-27",
				"description": ""
			}
		],
		"dates": {
			"start": "2016-04-24",
			"end": "2016-04-30"
		}
	},
	{
		"num": 6,
		"title": "The Python Standard Library",
		"visible": false,
		"days": [
			{
				"title": "The Python Standard Library",
				"date": "2016-05-02",
				"description": "TODO"
			},
			{
				"title": "TODO",
				"date": "2016-05-04",
				"description": "TODO"
			}
		],
		"dates": {
			"start": "2016-05-01",
			"end": "2016-05-07"
		}
	},
	{
		"num": 7,
		"title": "Third-Party Tools",
		"visible": false,
		"days": [
			{
				"title": "Third-Party Tools",
				"date": "2016-05-09",
				"description": "TODO"
			},
			{
				"title": "TODO",
				"date": "2016-05-11",
				"description": "TODO"
			}
		],
		"dates": {
			"start": "2016-05-08",
			"end": "2016-05-14"
		}
	},
	{
		"num": 8,
		"title": "The Python Ecosystem",
		"visible": false,
		"days": [
			{
				"title": "The Python Ecosystem",
				"date": "2016-05-16",
				"description": "TODO"
			},
			{
				"title": "TODO",
				"date": "2016-05-18",
				"description": "TODO"
			}
		],
		"dates": {
			"start": "2016-05-15",
			"end": "2016-05-21"
		}
	},
	{
		"num": 9,
		"title": "Advanced Topics",
		"visible": false,
		"days": [
			{
				"title": "Advanced Topics",
				"date": "2016-05-23",
				"description": "Advanced topics in Python that the class finds interesting. Possible topics include: alternate implementations of Python, contributing to Python open-source tools, how to get a job using Python, Python for programming competitions, or anything else."
			},
			{
				"title": "Final Project Presentations",
				"date": "2016-05-25",
				"description": ""
			}
		],
		"dates": {
			"start": "2016-05-22",
			"end": "2016-05-28"
		}
	},
	{
		"num": 10,
		"title": "Final Projects",
		"visible": false,
		"days": [
			{
				"title": "Final Project Presentations",
				"date": "2016-05-30",
				"description": ""
			},
			{
				"title": "Final Project Presentations",
				"date": "2016-06-01",
				"description": ""
			}
		],
		"dates": {
			"start": "2016-05-29",
			"end": "2016-06-04"
		}
	}
]